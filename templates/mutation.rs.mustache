use crate::db::Database;
use crate::entity::{{entityNamePlural}};
use ::async_graphql::{self, InputObject, SimpleObject};
use ::async_graphql::{Context, Object, Result};
use sea_orm::EntityTrait;
use sea_orm::{ActiveModelTrait, Set};

#[derive(InputObject)]
pub struct Create{{entityNamePascal}}Input {
    pub id: i32,
    {{#columns}}
    pub {{columnName}}: {{columnTypeRust}},
    {{/columns}}
}

#[derive(SimpleObject)]
pub struct DeleteResult {
    pub success: bool,
    pub rows_affected: u64,
}

#[derive(Default)]
pub struct {{entityNamePascal}}Mutation;

#[Object]
impl {{entityNamePascal}}Mutation {
    pub async fn create_{{entityName}}(
        &self,
        ctx: &Context<'_>,
        input: Create{{entityNamePascal}}Input,
    ) -> Result<{{entityNamePlural}}::Model> {
        let db = ctx.data::<Database>().unwrap();

        let {{entityName}} = {{entityNamePlural}}::ActiveModel {
            id: Set(input.id),
            {{#columns}}
            {{columnName}}: Set(input.{{columnName}}),
            {{/columns}}
            ..Default::default()
        };

        Ok({{entityName}}.insert(db.get_connection()).await?)
    }

    pub async fn delete_{{entityName}}(&self, ctx: &Context<'_>, id: i32) -> Result<DeleteResult> {
        let db = ctx.data::<Database>().unwrap();

        let res = {{entityNamePlural}}::Entity::delete_by_id(id)
            .exec(db.get_connection())
            .await?;

        if res.rows_affected <= 1 {
            Ok(DeleteResult {
                success: true,
                rows_affected: res.rows_affected,
            })
        } else {
            unimplemented!()
        }
    }
}

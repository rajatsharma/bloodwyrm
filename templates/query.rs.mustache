use crate::db::Database;
use crate::entity::halos;
use ::async_graphql::{Context, Object, Result};
use sea_orm::EntityTrait;

#[derive(Default)]
pub struct {{entityNamePascal}}Query;

#[Object]
impl {{entityNamePascal}}Query {
    async fn get_{{entityNamePlural}}(&self, ctx: &Context<'_>) -> Result<Vec<{{entityNamePlural}}::Model>> {
        let db = ctx.data::<Database>().unwrap();

        Ok({{entityNamePlural}}::Entity::find()
            .all(db.get_connection())
            .await
            .map_err(|e| e.to_string())?)
    }

    async fn get_{{entityName}}_by_id(&self, ctx: &Context<'_>, id: i32) -> Result<Option<{{entityNamePlural}}::Model>> {
        let db = ctx.data::<Database>().unwrap();

        Ok({{entityNamePlural}}::Entity::find_by_id(id)
            .one(db.get_connection())
            .await
            .map_err(|e| e.to_string())?)
    }
}
